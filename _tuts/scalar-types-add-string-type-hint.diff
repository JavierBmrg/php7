diff --git a/php7/code/src/AppBundle/Controller/GenusController.php b/php7/code/src/AppBundle/Controller/GenusController.php
index 302a262..6df94bb 100644
--- a/php7/code/src/AppBundle/Controller/GenusController.php
+++ b/php7/code/src/AppBundle/Controller/GenusController.php
@@ -15,6 +15,19 @@ use Symfony\Component\HttpFoundation\Response;
 class GenusController extends Controller
 {
     /**
+     * @Route("/genus/types-example")
+     */
+    public function typesExampleAction()
+    {
+        $genus = new Genus();
+        $genus->setName(4);
+
+        dump($genus);
+
+        return new Response('<html><body>Testing PHP7</body></html>');
+    }
+
+    /**
      * @Route("/genus/new")
      */
     public function newAction()
diff --git a/php7/code/src/AppBundle/Entity/Genus.php b/php7/code/src/AppBundle/Entity/Genus.php
index 9d95676..81583a9 100644
--- a/php7/code/src/AppBundle/Entity/Genus.php
+++ b/php7/code/src/AppBundle/Entity/Genus.php
@@ -99,7 +99,7 @@ class Genus
         return $this->name;
     }
 
-    public function setName($name)
+    public function setName(string $name)
     {
         $this->name = $name;
     }
diff --git a/php7/outline.md b/php7/outline.md
index 365c3d8..0234992 100644
--- a/php7/outline.md
+++ b/php7/outline.md
@@ -24,15 +24,19 @@ php bin/console server:run 127.0.0.1:8080
 
 ## Scalar types
 
-* Explain that new argument types are available: `bool`, `float`, `int`, `string`
-    - Open `src/AppBundle/Entity/Genus.php` file
-    - Add `string` to `setName($name)` method
-        + `public function setName(string $name)`
-    - Create new `typesAction()` method in `GenusController`
-        + Create `$genus = new Genus()`
-        + Add `$genus->setName(4);`
-    - Open the URL in browser
-    - Show that it still works
+Explain that new argument types are available: `bool`, `float`, `int`, `string`
+
+**Scalar types: Add string type hint**
+
+* Open `src/AppBundle/Entity/Genus.php` file
+* Add `string` to `setName($name)` method
+    + `public function setName(string $name)`
+* Open `GenusController`
+    + Mention that there is already a fancy action for creating new genus, but to make it easier to explain new features we will create a new simple action.
+    + Create `GenusController::typesExampleAction`
+* Open `http://localhost:8080/genus/types-example` in browser
+* Show dump panel in profiler, explain that even if we set the method to accept string it does not give any errors when receiving a different type (like integer)
+
 * Explain that there are two types of typing: weak (default), and strict
     - Explain that weak typing means that PHP will try to coerce values of the wrong type into the expected scalar type (if you give integer when string is expected it will convert it to string)
         + The reason why our code works even if it got the wrong type value
