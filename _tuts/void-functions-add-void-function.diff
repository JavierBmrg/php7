diff --git a/php7/outline.md b/php7/outline.md
index bdc5cd2..b2e3a83 100644
--- a/php7/outline.md
+++ b/php7/outline.md
@@ -105,11 +105,19 @@ Refresh browser, and show that it throws an error
 
 ## Void functions
 
+**Void functions: Add void function**
+
 * Explain that you might sometimes have functions what don't need to return any value.
 * Most of the time it would be some command type functions that do some work
 * Unless you are making a fluid interface your setters will only take some value without returning anything
 * Use the `void` as return type to make it clear for everyone reading your code that the function does not return a value
-    - Set all setters in `Genus` with `: void` (e.g., `public function setSubFamily(SubFamily $subFamily = null): void`)
+    - Edit `Genus` with `public function setFunFact(?string $funFact): void`
+* Explain that you can leave function as is without any `return` statement or add an empty `return` statement
+    - Edit `Genus` with `return;` for `setFunFact()`
+    - Inform that IDE shows that this statement is senseless, and can be safely removed (it is left for example purposes)
+    - Maybe show `Genus::addGenusScientist()` method which has an empty `return` statement, and is a better example of a void function with `return` statement
+* Refresh browser to show that everything still works
+
 * You can still use the `return` statement if you need to stop function execution early
     - It just has to be an empty return statement `return;`
         + It's not necessary, but for example case add `return;` to the end of some setter to show how it would look like. It would be best to use it somewhere in function that quits on `if` statement, but in the current code there is no good method for it.
diff --git a/src/AppBundle/Entity/Genus.php b/src/AppBundle/Entity/Genus.php
index 0abfb15..0ee7c90 100644
--- a/src/AppBundle/Entity/Genus.php
+++ b/src/AppBundle/Entity/Genus.php
@@ -133,9 +133,11 @@ class Genus
         return $this->funFact;
     }
 
-    public function setFunFact(?string $funFact)
+    public function setFunFact(?string $funFact): void
     {
         $this->funFact = $funFact;
+
+        return;
     }
 
     public function getUpdatedAt()
