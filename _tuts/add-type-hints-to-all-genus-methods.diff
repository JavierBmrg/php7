diff --git a/php7/code/src/AppBundle/Entity/Genus.php b/php7/code/src/AppBundle/Entity/Genus.php
index 0ee7c90..8398bcb 100644
--- a/php7/code/src/AppBundle/Entity/Genus.php
+++ b/php7/code/src/AppBundle/Entity/Genus.php
@@ -5,6 +5,7 @@ namespace AppBundle\Entity;
 
 use AppBundle\Repository\GenusRepository;
 use Doctrine\Common\Collections\ArrayCollection;
+use Doctrine\Common\Collections\Collection;
 use Doctrine\Common\Collections\Criteria;
 use Doctrine\ORM\Mapping as ORM;
 use Symfony\Component\Validator\Constraints as Assert;
@@ -90,40 +91,37 @@ class Genus
         $this->genusScientists = new ArrayCollection();
     }
 
-    public function getId()
+    public function getId(): ?int
     {
         return $this->id;
     }
 
-    public function getName(): string
+    public function getName(): ?string
     {
         return $this->name;
     }
 
-    public function setName(string $name)
+    public function setName(?string $name): void
     {
         $this->name = $name;
     }
 
-    /**
-     * @return SubFamily
-     */
-    public function getSubFamily()
+    public function getSubFamily(): ?SubFamily
     {
         return $this->subFamily;
     }
 
-    public function setSubFamily(SubFamily $subFamily = null)
+    public function setSubFamily(SubFamily $subFamily = null): void
     {
         $this->subFamily = $subFamily;
     }
 
-    public function getSpeciesCount()
+    public function getSpeciesCount(): ?int
     {
         return $this->speciesCount;
     }
 
-    public function setSpeciesCount($speciesCount)
+    public function setSpeciesCount(?int $speciesCount): void
     {
         $this->speciesCount = $speciesCount;
     }
@@ -140,50 +138,50 @@ class Genus
         return;
     }
 
-    public function getUpdatedAt()
+    public function getUpdatedAt(): \DateTimeInterface
     {
         return new \DateTime('-'.rand(0, 100).' days');
     }
 
-    public function setIsPublished($isPublished)
+    public function setIsPublished(bool $isPublished): void
     {
         $this->isPublished = $isPublished;
     }
 
-    public function getIsPublished()
+    public function getIsPublished(): bool
     {
         return $this->isPublished;
     }
 
     /**
-     * @return ArrayCollection|GenusNote[]
+     * @return Collection|GenusNote[]
      */
-    public function getNotes()
+    public function getNotes(): Collection
     {
         return $this->notes;
     }
 
-    public function getFirstDiscoveredAt()
+    public function getFirstDiscoveredAt(): ?\DateTimeInterface
     {
         return $this->firstDiscoveredAt;
     }
 
-    public function setFirstDiscoveredAt(\DateTime $firstDiscoveredAt = null)
+    public function setFirstDiscoveredAt(\DateTime $firstDiscoveredAt = null): void
     {
         $this->firstDiscoveredAt = $firstDiscoveredAt;
     }
 
-    public function getSlug()
+    public function getSlug(): ?string
     {
         return $this->slug;
     }
 
-    public function setSlug($slug)
+    public function setSlug(?string $slug): void
     {
         $this->slug = $slug;
     }
 
-    public function addGenusScientist(GenusScientist $genusScientist)
+    public function addGenusScientist(GenusScientist $genusScientist): void
     {
         if ($this->genusScientists->contains($genusScientist)) {
             return;
@@ -194,7 +192,7 @@ class Genus
         $genusScientist->setGenus($this);
     }
 
-    public function removeGenusScientist(GenusScientist $genusScientist)
+    public function removeGenusScientist(GenusScientist $genusScientist): void
     {
         if (!$this->genusScientists->contains($genusScientist)) {
             return;
@@ -206,9 +204,9 @@ class Genus
     }
 
     /**
-     * @return ArrayCollection|GenusScientist[]
+     * @return Collection|GenusScientist[]
      */
-    public function getGenusScientists()
+    public function getGenusScientists(): Collection
     {
         return $this->genusScientists;
     }
@@ -216,7 +214,7 @@ class Genus
     /**
      * @return \Doctrine\Common\Collections\Collection|GenusScientist[]
      */
-    public function getExpertScientists()
+    public function getExpertScientists(): Collection
     {
         return $this->getGenusScientists()->matching(
             GenusRepository::createExpertCriteria()
diff --git a/php7/outline.md b/php7/outline.md
index b4a888d..c147520 100644
--- a/php7/outline.md
+++ b/php7/outline.md
@@ -129,6 +129,22 @@ Refresh browser, and show that it throws an error
 * Edit `Genus::setFunFact()` with `return;` (undo)
 * Refresh page to show that it works again
 
+**Add type hints to all Genus methods**
+
+* Edit `Genus` to add type hints, return type hints, void functions
+* Can explain that you can remove phpDocs saying which value is returned as you can set it now in code (example `Genus::getSubFamily()` method). But leaving it for `Genus::getNotes()` because so far it's not possible to define that objects the collection contains
+* Can explain that a lot of type hints are nullable because our entity is not very strict (mostly due to being used in the form where `get*`/`set*` often use `null` value), but if wanted we could make it more strict removing nullable (example `Genus::[set|get]IsPublished()` which is strictly `bool` as we only set or get `true/false` values from them)
+* Might be worth mentioning that it's best to type hint against an interface (or to be sure it will return the same implementation every time). Example: `Genus::getGenusScientists()` returns `Doctrine\Common\Collections\ArrayCollection`, type hinting against it is fine if it's non-persisted entity, but if you tried to open a persisted entity it will fail because the method returns `Doctrine\ORM\PersistentCollection`, type hinting against `\Doctrine\Common\Collections\Collection` interface solves this problem.
+
+* Can show that our code is still working
+    - Open `http://localhost:8080/genus/new` in browser
+    - Open created genus
+    - Open `http://localhost:8080/login`
+    - Login with `weaverryan+1@gmail.com` / `iliketurtles`
+    - Press edit button on any of genuses in admin list
+    - Edit the form (example: Enter some fun fact like 'This is fun')
+        + Press save
+
 ## Class constant visibility
 
 * !! Went over all the code, and can't see a good example. The best one would be to take some "hard-coded" value, and use a constant for that (thought with the current code it's unnecessary).
